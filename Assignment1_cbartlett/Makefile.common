# name of executable

PROJECT=$(notdir $(CURDIR))
ELF=$(notdir $(CURDIR)).elf
BIN=$(notdir $(CURDIR)).bin

# Get common definitions

include Makefile.Includes

# Tool path

TOOLROOT=/usr/bin

# Tools

CC=$(TOOLROOT)/arm-none-eabi-gcc
CXX=$(TOOLROOT)/arm-none-eabi-g++
LD=$(TOOLROOT)/arm-none-eabi-g++
AR=$(TOOLROOT)/arm-none-eabi-ar
AS=$(TOOLROOT)/arm-none-eabi-as
OBJCOPY=$(TOOLROOT)/arm-none-eabi-objcopy

# Search path for standard files

vpath %.cpp $(TEMPLATEROOT)/Bsp

# Search path for perpheral library

vpath %.c $(CORE)
# vpath %.c $(PERIPH)/src
vpath %.c $(DEVICE)

# Search path for Library

vpath %.cpp $(TEMPLATEROOT)/Lib

#  Processor specific

PTYPE = STM32F10X_MD_VL
LDSCRIPT = $(TEMPLATEROOT)/Bsp/stm32f100.ld
STARTUP= \
	startup_stm32f10x.o \
	system_stm32f10x.o

# Compilation Flags

FULLASSERT = -DUSE_FULL_ASSERT

LDLIBS = -static -L$(PERIPH)/lib -lstm32_std_periph
LDFLAGS+= -T$(LDSCRIPT) -I$(TEMPLATEROOT)/Bsp -mthumb -mcpu=cortex-m3 -Wl,-Map=$(PROJECT).map
# CFLAGS+= -mcpu=cortex-m3 -mthumb -Wa,-adhln
CFLAGS+= -mcpu=cortex-m3 -mthumb
CFLAGS+= -I$(TEMPLATEROOT)/Bsp -I. $(STDINCS)
CFLAGS+= -D$(PTYPE) -DUSE_STDPERIPH_DRIVER $(FULLASSERT) -DSTM32F10X_MD_VL
CFLAGS+= -I$(TEMPLATEROOT)/Lib
CFLAGS+= -I$(LIBRARY)

# add other objects to clean

CLEANOTHER = $(PROJECT).map

# Store object files in separate directory

OBJSDIR = obj
OBJS := $(OBJS) $(STARTUP)
OBJS := $(patsubst %.o,$(OBJSDIR)/%.o,$(OBJS))

# Build executable

all: $(ELF) $(BIN) test

$(ELF) : $(OBJS)
	$(CXX) $(LDFLAGS) -o $@ $(OBJS) $(LDLIBS)

# compile and generate dependency info
$(OBJS): | $(OBJSDIR)

$(OBJSDIR):
	@mkdir -p $@

$(OBJSDIR)/%.o: %.c
	@$(CC) -c $(CFLAGS) $(CWARNINGS) $< -o $@
	@$(CC) -MM $(CFLAGS) $< > $(OBJSDIR)/$*.d

$(OBJSDIR)/%.o: %.cpp
	@$(CXX) -c $(CFLAGS) $(CPPFLAGS) $(CWARNINGS) $(CPPWARNINGS) $< -o $@
	# @$(CXX) -c $(CFLAGS) $(CPPFLAGS) $(CWARNINGS) $(CPPWARNINGS) $< -o $@ > $(OBJSDIR)/$*.s
	@$(CXX) -MM $(CFLAGS) $(CPPFLAGS) $< > $(OBJSDIR)/$*.d

$(OBJSDIR)/%.o: %.s
	@$(CC) -c $(CFLAGS) $< -o $@

$(BIN): $(ELF)
	$(OBJCOPY) -O binary -S $< $@

.PHONY: print
print:
	@echo "OBJ: "
	@echo $(OBJS)
	@echo "OBJDIR: "
	@echo $(OBJSDIR)

.PHONY: clean
clean:
	rm -fr $(OBJSDIR) $(BIN) $(ELF) $(CLEANOTHER)
	$(MAKE) -C Tests clean

.PHONY: test
test:
	$(MAKE) -C Tests all

.PHONY: ddd
ddd: $(ELF)
	ddd --command=.ddd_gdb --debugger arm-none-eabi-gdb $(ELF)

.PHONY: nemiver
nemiver: $(ELF)
	arm-none-eabi-gdb --batch --command=.nemiver_gdb $(ELF)
	nemiver --remote=localhost:4242 --gdb-binary=/usr/bin/arm-none-eabi-gdb $(ELF)

.PHONY: stlink
stlink:
	st-util -1

.PHONY: flash
flash: $(BIN)
	st-flash write v1 $(BIN) 0x08000000

.PHONY: term
term:
	@echo "\n\t> GtkTerm configuration defined in '~/.gtktermrc'\n"
	gtkterm -c Project &

# pull in dependencies

-include $(OBJS:.o=.d)




